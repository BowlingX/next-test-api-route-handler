# TODO: description
#
# * Note: feel free to run this workflow in forks (e.g. for testing your PR)
# * without worrying about this workflow attempting to deploy a package ðŸš€
#
# ! To prevent errors, the following GitHub repository secrets must be defined:
# !   CODECOV_TOKEN (optional for public repos)
# !   GPG_PRIVATE_KEY
# !   GPG_PASSPHRASE
# !   GH_TOKEN
# !   NPM_TOKEN

# TODO: 1. is it "actor" or "sender"?
# TODO: 2. parse JSON
# TODO: 3. use passed pr-number and commit-sha
# TODO: 4. do not git checkout anything
# TODO: 5. upload codecov artifact and download it based on true/false in meta.json

name: deploy

on:
  workflow_run:
    types: [completed]
    branches: [main, canary]

jobs:
  metadata:
    name: 'gather-metadata'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should-skip-ci: ${{ steps.skip.outputs.should-skip-ci == 'true' }}
      should-skip-cd: ${{ steps.skip.outputs.should-skip-cd == 'true' }}
      node-matrix: ${{ steps.set-matrix.outputs.node-matrix }}
      webpack-matrix: ${{ steps.set-matrix.outputs.webpack-matrix }}
      current-branch: ${{ steps.branch.outputs.current-branch }}
      can-release: ${{ steps.release.outputs.can-release }}
      can-automerge: ${{ steps.automerge.outputs.can-automerge == 'true' }}
      can-retry-automerge: ${{ env.AUTOMERGE_CAN_RETRY == 'true' }}
      has-deploy: ${{ steps.data.outputs.has-deploy == 'true' }}
      has-release-config: ${{ steps.data.outputs.has-release-config == 'true' }}
      has-docs: ${{ steps.data.outputs.has-docs == 'true' }}
      has-externals: ${{ steps.data.outputs.has-externals == 'true' }}
      has-integration-node:
        ${{ steps.data.outputs.has-integration-node == 'true' }}
      has-integration-externals:
        ${{ steps.data.outputs.has-integration-externals == 'true' }}
      has-integration-client:
        ${{ steps.data.outputs.has-integration-client == 'true' }}
      has-integration-webpack:
        ${{ steps.data.outputs.has-integration-webpack == 'true' }}

    steps:

  # ? Skip this job:
  # ? 1. If CI and/or CD are skipped globally
  # ? 2. On PRs
  # ? 3. In repo forks
  # ? 4. If no semantic-release configuration
  build:
    name: '[CD] build'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: metadata
    if: |
      needs.metadata.outputs.should-skip != 'true'
      && needs.metadata.outputs.can-release == 'true'
      && needs.metadata.outputs.has-release-config == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Reconfigure git auth
        run:
          git config --global url."https://${{ secrets.GH_TOKEN
          }}@github.com/".insteadOf ssh://git@github.com/

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Cache npm
        uses: actions/cache@v2.1.4
        id: cache-npm
        with:
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: npm-${{ runner.os }}-

      - name: Install CI dependencies
        run: |
          npm ci
          PEER_DEPS=$(node -e 'console.log(Object.entries(require("./package.json").peerDependencies || {}).map(([p,v]) => `${p}@${v}`).join(" "))')
          ! [ -z "$DEBUG" ] && echo "(install targets) PEER_DEPS='$PEER_DEPS'" || true
          ! [ -z "$PEER_DEPS" ] && npm install --no-save $PEER_DEPS || true

      - name: Pre source formatting
        run: npm run format

      - name: Build distributables
        run: npm run build-dist

      - name: Build documentation
        if: needs.metadata.outputs.has-docs == 'true'
        run: npm run build-docs

      - name: Run formatting
        run: npm run format

      - name: Cache build
        uses: actions/cache@v2.1.4
        id: cache-build
        with:
          key: build-${{ runner.os }}-${{ github.sha }}
          path: ./*

  # ? This job always runs except:
  # ? 1. If the "build" job failed or was skipped
  # ? 2. If CI pipeline didn't complete successfully
  release:
    name: '[CD] release'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - metadata
      - build
    if: needs.build.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Reconfigure git auth
        run:
          git config --global url."https://${{ secrets.GH_TOKEN
          }}@github.com/".insteadOf ssh://git@github.com/

      - name: Restore build
        uses: actions/cache@v2.1.4
        id: restore-build
        with:
          key: build-${{ runner.os }}-${{ github.sha }}
          path: ./*

      - name: Fail if build not restored
        if: steps.restore-build.outputs.cache-hit != 'true'
        run: |
          echo '::error::release job failed to restore build ${{ github.sha }}'
          exit 1

      - name: Use node ${{ env.NODE_CURRENT_VERSION }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ env.NODE_CURRENT_VERSION }}

      - name: Import gpg key
        id: gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-committer-name: ${{ env.CI_COMMITTER_NAME }}
          git-committer-email: ${{ env.CI_COMMITTER_EMAIL }}

      - name: Perform semantic release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SHOULD_UPDATE_CHANGELOG:
            ${{ needs.metadata.outputs.current-branch == 'main' }}
          SHOULD_DEPLOY: ${{ needs.metadata.outputs.has-deploy == 'true' }}
          GIT_AUTHOR_NAME: ${{ env.CI_COMMITTER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ env.CI_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ env.CI_COMMITTER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ env.CI_COMMITTER_EMAIL }}
        run: npx semantic-release

  # ? This job always runs except:
  # ? 1. If CI and/or CD are skipped globally
  # ? 2. If the "build" or "release" jobs weren't skipped
  # ? 3. If not a PR
  # ? 4. If the PR is a draft
  # ? 5. If CI pipeline didn't complete successfully
  auto-merge:
    name: '[CD] auto-merge'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - metadata
      - build
      - release
    if: |
      always()
      && needs.metadata.outputs.should-skip != 'true'
      && needs.metadata.outputs.can-automerge == 'true'
      && needs.build.result == 'skipped'
      && needs.release.result == 'skipped'
    steps:
      - name: 'Merge pull request'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const MAX_RETRIES = 2;
            const MINIMUM_SECONDS = 10;
            const JITTER_SECONDS = 10;

            let success = false;
            let errors = [];
            let jitter = 0;

            const pullRequest = context.payload.pull_request;
            const repository = context.repo;
            const debugging = !!'${{ env.DEBUG }}';
            const canRetryMerge =
              '${{ needs.metadata.outputs.can-retry-automerge }}' == 'true';

            const delay = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            const withErrorHandling = (promise, failData = {}) => {
              return promise.catch((e) =>
                Promise.resolve({
                  status: e.status || 0,
                  data: { message: e.message, ...failData }
                })
              );
            };

            if (debugging) {
              console.log('MAX_RETRIES:', MAX_RETRIES);
              console.log('MINIMUM_SECONDS:', MINIMUM_SECONDS);
              console.log('JITTER_SECONDS:', JITTER_SECONDS);
              console.log('repository:', repository);
              console.log(
                'canRetryMerge:',
                canRetryMerge,
                ' ("${{ needs.metadata.outputs.can-retry-automerge }}")'
              );
              console.log('pullRequest.number:', pullRequest.number);
              console.log(`head_ref (sha): ${pullRequest.head.sha}`);
            }

            for (let tries = 0; !success && tries < MAX_RETRIES; ++tries) {
              const failSymbol = Symbol('fail');

              try {
                const latestPullRequest = await withErrorHandling(
                  github.pulls.get(
                    {
                      owner: repository.owner,
                      repo: repository.repo,
                      pull_number: pullRequest.number
                    },
                    { failed: failSymbol }
                  )
                );

                if (debugging) {
                  console.log('latestPullRequest->status:', latestPullRequest.status);
                  console.log(
                    'latestPullRequest->message:',
                    latestPullRequest.data.message
                  );
                  console.log('latestPullRequest->failed:', latestPullRequest.data.failed);
                  console.log('latestPullRequest->state:', latestPullRequest.data.state);
                  console.log('latestPullRequest->merged:', latestPullRequest.data.merged);
                  console.log('latestPullRequest->draft:', latestPullRequest.data.draft);
                }

                if (latestPullRequest.status == 404) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} no longer exists`
                  );
                  return;
                } else if (latestPullRequest.data.failed == failSymbol) {
                  throw new Error(
                    latestPullRequest.data.message ||
                      `failed to get PR #${pullRequest.number}: status code ${status}`
                  );
                } else if (latestPullRequest.data.merged) {
                  core.info(
                    `Auto-merge skipped: PR #${pullRequest.number} has already been merged`
                  );
                  return;
                } else if (latestPullRequest.data.draft) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} was marked as a draft`
                  );
                  return;
                } else if (
                  latestPullRequest.status < 400 &&
                  latestPullRequest.data.state != 'open'
                ) {
                  core.warning(
                    `Auto-merge skipped: PR #${pullRequest.number} is no longer open`
                  );
                  return;
                } // ? Mergeability check is the attempt to merge itself (below)

                const {
                  status,
                  data: { merged, message }
                } = await withErrorHandling(
                  github.pulls.merge({
                    owner: repository.owner,
                    repo: repository.repo,
                    pull_number: pullRequest.number,
                    sha: pullRequest.head.sha,
                    merge_method: 'merge'
                  }),
                  { merged: false }
                );

                if (debugging) {
                  console.log('mergeAttempt->status:', status);
                  console.log('mergeAttempt->message:', message);
                  console.log('mergeAttempt->merged:', merged);
                }

                const defaultError =
                  message ||
                  `failed to merge PR #${pullRequest.number}: status code ${status}`;

                if ([403, 404, 422].includes(status)) {
                  core.setFailed(`Auto-merge failed: ${message}`);
                  return;
                } else if (status == 409) {
                  core.info(
                    `Auto-merge skipped: current HEAD is out of sync with PR #${pullRequest.number}`
                  );
                } else if (status >= 400 && status < 500 && !canRetryMerge) {
                  core.setFailed(`Auto-merge failed: ${defaultError}`);
                  return;
                } else if (!merged) {
                  throw new Error(defaultError);
                }

                success = true;
              } catch (e) {
                console.error(
                  'Auto-merge failed:',
                  e.message || e || 'an unknown error occurred'
                );

                if (tries + 1 < MAX_RETRIES) {
                  const nextRetryIn = 2 ** tries * MINIMUM_SECONDS * 1000 + jitter;
                  jitter += Math.random() * JITTER_SECONDS * 1000;
                  core.warning(
                    `Auto-merge attempt ${
                      tries + 1
                    }/${MAX_RETRIES} failed, next try in ${Math.round(
                      nextRetryIn / 1000
                    )} seconds`
                  );

                  await delay(nextRetryIn);
                }
              }
            }

            if (!success) core.setFailed(`Auto-merge failed after ${MAX_RETRIES} attempts`);
